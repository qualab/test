// Internal header with test::scope::data declaration

#include <test/scope>
#include <string>
#include <map>

namespace test
{
    class scope::data
    {
    public:
        data(scope& self); // global scope only!
        data(scope& self, scope& owner, const char* name);

        const char* get_name() const;
        const char* get_path() const;
        const char* get_full_name() const;

        const scope& get_owner() const;
        scope& get_owner();

        iterator begin();
        iterator end();
        iterator find(const char* name);

        typedef std::map<std::string, scope> scope_container;

    private:
        scope& m_self;
        scope& m_owner;
        std::string m_name;
        std::string m_path;
        std::string m_full_name;
        scope_container m_inner;
    };

    class scope::iterator::data
    {
    public:
        typedef scope::data::scope_container::iterator value_type;

        data(const value_type& value);

        void set_value(const value_type& value);
        const value_type& get_value() const;
              value_type& get_value();

    private:
        value_type m_value;
    };
}

// Unicode signature: Владимир Керимов
