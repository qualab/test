// Public header: <test/scope>
// recursive scope with test checks

#pragma once

#include <test/export>
#include <functional>
#include <iterator>
#include <memory>

namespace test
{
    class TEST_PUBLIC scope
    {
    public:
        scope(scope& owner, const char* name); // create as a part of owner scope
        scope(const char* name); // create as a part of global scope
        virtual ~scope();

        const char* get_name() const;
        const char* get_path() const;
        const char* get_full_name() const;

        const scope& get_owner() const;
              scope& get_owner();

        virtual void run(const char* file, long long line);

        static scope& global();
            
        typedef std::function<void(scope&)> handler;

        void each(const handler& functor);

        class iterator;

        iterator begin();
        iterator end();
        iterator find(const char* name);

    private:
        // hidden data details:
        // * std::string v/s unicode::text
        // * container for inner scopes
        class data;

        // it is normal to share usually single instance of test scope
        std::shared_ptr<data> m_data;

        scope(); // create global scope
    };

    class TEST_PUBLIC scope::iterator
        : public std::iterator<std::bidirectional_iterator_tag, scope>
    {
    public:
        class data;

        iterator(data&& new_data);
        iterator(const iterator& another);
        iterator(iterator&& temporary);
        ~iterator();

        iterator& operator = (const iterator& another);
        iterator& operator = (iterator&& temporary);

        iterator& operator ++ ();
        iterator& operator -- ();
        iterator operator ++ (int);
        iterator operator -- (int);

        const scope& operator * () const;
              scope& operator * ();

        const scope* operator -> () const;
              scope* operator -> ();

        bool operator == (const iterator& another) const;
        bool operator != (const iterator& another) const;

    private:
        data* m_data;
        static const size_t max_data_size = 16;
        char m_buffer[max_data_size];
    };
}

// Unicode signature: Владимир Керимов
